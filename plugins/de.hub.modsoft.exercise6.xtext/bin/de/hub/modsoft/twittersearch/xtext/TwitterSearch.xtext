grammar de.hub.modsoft.twittersearch.xtext.TwitterSearch with org.eclipse.xtext.common.Terminals

import "http://www.hu-berlin.de/modsoft/TwitterSearch/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Twitter:
	{Twitter}
	"configuration" ":"
	(objectTypes+=ObjectTypeDclr)*
	"searches" ":"
	(searches+=Search)*
;

ObjectTypeDclr returns TwitterObjectType:
	"objecttype" name=ID '{'
		(fields+=FieldDclr)*
	'}'
;

FieldDclr returns FieldDeclaration:	
	"field" name=ID ':' fieldType=FieldType
;

enum FieldType returns FieldTypes: boolean = 'BOOLEAN' | int = 'INT' | string = 'STRING';

Search returns Search:
	{Search}
	"search" "for" searchFor=[TwitterObjectType|ID] 
	(options+=Option)* 
	("where" conditions+=Condition ("&" conditions+=Condition)*)? 
	("sort" sortation=FieldExpression)?  
	";"
;

Option returns SearchOption: Keywords | Location | Time;
Keywords returns Keywords: "with" keywords+=STRING ("," keywords+=STRING)*;
Location returns Location: "in" "geo" "(" lon=DOUBLE "," lat=DOUBLE "," radius=DOUBLE radiusUnit=DistanceUnit")";
Time returns Time: ("before" before=DATE);

Condition returns Condition: StringCondition | IntCondition | BooleanCondition;
enum StringOperators returns StringOperators: contains = 'contains' | containsnot = 'containsnot';
StringCondition returns StringCondition: field=FieldExpression "." operator=StringOperators "(" operand=STRING ")";
enum IntOperators returns IntOperators:	gt = '>' | lt = '<' | eq = '=' | geq = '>=' | leq = '<=';
IntCondition returns IntCondition: field=FieldExpression operator=IntOperators operand=INT;
BooleanCondition returns BooleanCondition: field=FieldExpression;

FieldExpression returns FieldExpr: fieldDeclaration=[FieldDeclaration|ID];

enum DistanceUnit returns DistanceUnit:	mi = 'mi' | km = 'km';

DOUBLE returns ecore::EDouble: '-'? INT ('.' INT)?;
DATE returns ecore::EDate:INT'.'INT'.'INT;
