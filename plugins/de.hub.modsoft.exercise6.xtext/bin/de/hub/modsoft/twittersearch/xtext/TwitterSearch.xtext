grammar de.hub.modsoft.twittersearch.xtext.TwitterSearch with org.eclipse.xtext.common.Terminals

import "http://www.hu-berlin.de/modsoft/TwitterSearch/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	"twitter" "{"
		(twitterTypes+=TwitterType)*
	"}"
	"searches" "{"
		(searches+=Search)*
	"}"
;

TwitterType returns TwitterTypeDeclaration : TwitterObjectType | TwitterPrimitiveType;

TwitterPrimitiveType returns TwitterPrimitiveTypeDeclaration:
	"primitive" name=ID
;


TwitterObjectType returns TwitterObjectTypeDeclaration:
	"object" name=ID '{'
		(fields+=FieldDclr)*
	'}'
;

FieldDclr returns TwitterFieldDeclaration:	
	"field" name=ID ':' type=[TwitterTypeDeclaration|ID]
;

Search returns Search:
	{Search}
	"search" "for" searchType=[TwitterObjectTypeDeclaration|ID] 
	(options+=Option)* 
	("where" conditions+=Condition ("&" conditions+=Condition)*)?
	";"
;

Option returns SearchOption: Keywords | Location | Time;
Keywords returns Keywords: "with" keywords+=STRING ("," keywords+=STRING)*;
Location returns Location: "in" "geo" "(" lon=DOUBLE "," lat=DOUBLE "," radius=DOUBLE radiusUnit=DistanceUnit")";
Time returns Time: ("before" before=DATE);

Condition returns Condition: IntCondition | BooleanCondition;
enum IntOperators returns IntOperators:	gt = '>' | lt = '<' | eq = '=' | geq = '>=' | leq = '<=';

IntCondition returns IntCondition: fieldDeclaration=[TwitterFieldDeclaration|ID] operator=IntOperators operand=INT;
BooleanCondition returns BooleanCondition: fieldDeclaration=[TwitterFieldDeclaration|ID];

enum DistanceUnit returns DistanceUnit:	mi = 'mi' | km = 'km';

DOUBLE returns ecore::EDouble: '-'? INT ('.' INT)?;
DATE returns ecore::EDate:INT'.'INT'.'INT;
