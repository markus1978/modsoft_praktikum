/*
 * generated by Xtext
 */
grammar InternalTwitterSearch;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.hub.modsoft.twittersearch.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.hub.modsoft.twittersearch.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.hub.modsoft.twittersearch.xtext.services.TwitterSearchGrammarAccess;

}

@parser::members {

 	private TwitterSearchGrammarAccess grammarAccess;
 	
    public InternalTwitterSearchParser(TokenStream input, TwitterSearchGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected TwitterSearchGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)	otherlv_1='twitter' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getTwitterKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTwitterTypesTwitterTypeParserRuleCall_3_0()); 
	    }
		lv_twitterTypes_3_0=ruleTwitterType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"twitterTypes",
        		lv_twitterTypes_3_0, 
        		"TwitterType");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4());
    }
	otherlv_5='searches' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getSearchesKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getSearchesSearchParserRuleCall_7_0()); 
	    }
		lv_searches_7_0=ruleSearch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"searches",
        		lv_searches_7_0, 
        		"Search");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleTwitterType
entryRuleTwitterType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTwitterTypeRule()); }
	 iv_ruleTwitterType=ruleTwitterType 
	 { $current=$iv_ruleTwitterType.current; } 
	 EOF 
;

// Rule TwitterType
ruleTwitterType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTwitterTypeAccess().getTwitterObjectTypeParserRuleCall_0()); 
    }
    this_TwitterObjectType_0=ruleTwitterObjectType
    { 
        $current = $this_TwitterObjectType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTwitterTypeAccess().getTwitterPrimitiveTypeParserRuleCall_1()); 
    }
    this_TwitterPrimitiveType_1=ruleTwitterPrimitiveType
    { 
        $current = $this_TwitterPrimitiveType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTwitterPrimitiveType
entryRuleTwitterPrimitiveType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTwitterPrimitiveTypeRule()); }
	 iv_ruleTwitterPrimitiveType=ruleTwitterPrimitiveType 
	 { $current=$iv_ruleTwitterPrimitiveType.current; } 
	 EOF 
;

// Rule TwitterPrimitiveType
ruleTwitterPrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='primitive' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTwitterPrimitiveTypeAccess().getPrimitiveKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTwitterPrimitiveTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTwitterPrimitiveTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleTwitterObjectType
entryRuleTwitterObjectType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTwitterObjectTypeRule()); }
	 iv_ruleTwitterObjectType=ruleTwitterObjectType 
	 { $current=$iv_ruleTwitterObjectType.current; } 
	 EOF 
;

// Rule TwitterObjectType
ruleTwitterObjectType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='object' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTwitterObjectTypeAccess().getObjectKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTwitterObjectTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTwitterObjectTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTwitterObjectTypeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTwitterObjectTypeAccess().getFieldsFieldDclrParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleFieldDclr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTwitterObjectTypeRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"FieldDclr");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTwitterObjectTypeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFieldDclr
entryRuleFieldDclr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldDclrRule()); }
	 iv_ruleFieldDclr=ruleFieldDclr 
	 { $current=$iv_ruleFieldDclr.current; } 
	 EOF 
;

// Rule FieldDclr
ruleFieldDclr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='field' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFieldDclrAccess().getFieldKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFieldDclrAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldDclrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldDclrAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldDclrRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getFieldDclrAccess().getTypeTwitterTypeCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleSearch
entryRuleSearch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSearchRule()); }
	 iv_ruleSearch=ruleSearch 
	 { $current=$iv_ruleSearch.current; } 
	 EOF 
;

// Rule Search
ruleSearch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
	otherlv_0='TODO' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSearchAccess().getTODOKeyword());
    }

;









RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


