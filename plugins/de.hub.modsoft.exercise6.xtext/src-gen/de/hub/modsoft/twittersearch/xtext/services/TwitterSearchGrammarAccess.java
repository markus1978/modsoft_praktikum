/*
 * generated by Xtext
 */
package de.hub.modsoft.twittersearch.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TwitterSearchGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTwitterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTwitterTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTwitterTypesTwitterTypeParserRuleCall_3_0 = (RuleCall)cTwitterTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSearchesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSearchesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSearchesSearchParserRuleCall_7_0 = (RuleCall)cSearchesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Model:
		//	{Model} "twitter" "{" twitterTypes+=TwitterType* "}" "searches" "{" searches+=Search* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Model} "twitter" "{" twitterTypes+=TwitterType* "}" "searches" "{" searches+=Search* "}"
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//"twitter"
		public Keyword getTwitterKeyword_1() { return cTwitterKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//twitterTypes+=TwitterType*
		public Assignment getTwitterTypesAssignment_3() { return cTwitterTypesAssignment_3; }

		//TwitterType
		public RuleCall getTwitterTypesTwitterTypeParserRuleCall_3_0() { return cTwitterTypesTwitterTypeParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//"searches"
		public Keyword getSearchesKeyword_5() { return cSearchesKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//searches+=Search*
		public Assignment getSearchesAssignment_7() { return cSearchesAssignment_7; }

		//Search
		public RuleCall getSearchesSearchParserRuleCall_7_0() { return cSearchesSearchParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TwitterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwitterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTwitterObjectTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTwitterPrimitiveTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TwitterType:
		//	TwitterObjectType | TwitterPrimitiveType;
		@Override public ParserRule getRule() { return rule; }

		//TwitterObjectType | TwitterPrimitiveType
		public Alternatives getAlternatives() { return cAlternatives; }

		//TwitterObjectType
		public RuleCall getTwitterObjectTypeParserRuleCall_0() { return cTwitterObjectTypeParserRuleCall_0; }

		//TwitterPrimitiveType
		public RuleCall getTwitterPrimitiveTypeParserRuleCall_1() { return cTwitterPrimitiveTypeParserRuleCall_1; }
	}

	public class TwitterPrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwitterPrimitiveType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TwitterPrimitiveType:
		//	"primitive" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"primitive" name=ID
		public Group getGroup() { return cGroup; }

		//"primitive"
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TwitterObjectTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwitterObjectType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldDclrParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TwitterObjectType returns TwitterObjectTypeDeclaration:
		//	"object" name=ID "{" fields+=FieldDclr* "}";
		@Override public ParserRule getRule() { return rule; }

		//"object" name=ID "{" fields+=FieldDclr* "}"
		public Group getGroup() { return cGroup; }

		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=FieldDclr*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//FieldDclr
		public RuleCall getFieldsFieldDclrParserRuleCall_3_0() { return cFieldsFieldDclrParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FieldDclrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDclr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTwitterTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTwitterTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeTwitterTypeCrossReference_3_0.eContents().get(1);
		
		//FieldDclr returns TwitterFieldDeclaration:
		//	"field" name=ID ":" type=[TwitterType];
		@Override public ParserRule getRule() { return rule; }

		//"field" name=ID ":" type=[TwitterType]
		public Group getGroup() { return cGroup; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[TwitterType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[TwitterType]
		public CrossReference getTypeTwitterTypeCrossReference_3_0() { return cTypeTwitterTypeCrossReference_3_0; }

		//ID
		public RuleCall getTypeTwitterTypeIDTerminalRuleCall_3_0_1() { return cTypeTwitterTypeIDTerminalRuleCall_3_0_1; }
	}

	public class SearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Search");
		private final Keyword cTODOKeyword = (Keyword)rule.eContents().get(1);
		
		//Search:
		//	"TODO";
		@Override public ParserRule getRule() { return rule; }

		//"TODO"
		public Keyword getTODOKeyword() { return cTODOKeyword; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//DOUBLE returns ecore::EDouble:
		//	"-"? INT ("." INT)?;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//DATE returns ecore::EDate:
		//	INT "." INT "." INT;
		@Override public ParserRule getRule() { return rule; }

		//INT "." INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	
	
	private final ModelElements pModel;
	private final TwitterTypeElements pTwitterType;
	private final TwitterPrimitiveTypeElements pTwitterPrimitiveType;
	private final TwitterObjectTypeElements pTwitterObjectType;
	private final FieldDclrElements pFieldDclr;
	private final SearchElements pSearch;
	private final DOUBLEElements pDOUBLE;
	private final DATEElements pDATE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TwitterSearchGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTwitterType = new TwitterTypeElements();
		this.pTwitterPrimitiveType = new TwitterPrimitiveTypeElements();
		this.pTwitterObjectType = new TwitterObjectTypeElements();
		this.pFieldDclr = new FieldDclrElements();
		this.pSearch = new SearchElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pDATE = new DATEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.hub.modsoft.twittersearch.xtext.TwitterSearch".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} "twitter" "{" twitterTypes+=TwitterType* "}" "searches" "{" searches+=Search* "}";
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//TwitterType:
	//	TwitterObjectType | TwitterPrimitiveType;
	public TwitterTypeElements getTwitterTypeAccess() {
		return pTwitterType;
	}
	
	public ParserRule getTwitterTypeRule() {
		return getTwitterTypeAccess().getRule();
	}

	//TwitterPrimitiveType:
	//	"primitive" name=ID;
	public TwitterPrimitiveTypeElements getTwitterPrimitiveTypeAccess() {
		return pTwitterPrimitiveType;
	}
	
	public ParserRule getTwitterPrimitiveTypeRule() {
		return getTwitterPrimitiveTypeAccess().getRule();
	}

	//TwitterObjectType returns TwitterObjectTypeDeclaration:
	//	"object" name=ID "{" fields+=FieldDclr* "}";
	public TwitterObjectTypeElements getTwitterObjectTypeAccess() {
		return pTwitterObjectType;
	}
	
	public ParserRule getTwitterObjectTypeRule() {
		return getTwitterObjectTypeAccess().getRule();
	}

	//FieldDclr returns TwitterFieldDeclaration:
	//	"field" name=ID ":" type=[TwitterType];
	public FieldDclrElements getFieldDclrAccess() {
		return pFieldDclr;
	}
	
	public ParserRule getFieldDclrRule() {
		return getFieldDclrAccess().getRule();
	}

	//Search:
	//	"TODO";
	public SearchElements getSearchAccess() {
		return pSearch;
	}
	
	public ParserRule getSearchRule() {
		return getSearchAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//	"-"? INT ("." INT)?;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	//DATE returns ecore::EDate:
	//	INT "." INT "." INT;
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
