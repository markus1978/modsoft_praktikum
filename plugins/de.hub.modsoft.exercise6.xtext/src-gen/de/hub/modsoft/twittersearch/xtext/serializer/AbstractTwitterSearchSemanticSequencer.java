/*
 * generated by Xtext
 */
package de.hub.modsoft.twittersearch.xtext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.hub.modsoft.twittersearch.model.FieldDeclaration;
import de.hub.modsoft.twittersearch.model.Search;
import de.hub.modsoft.twittersearch.model.Twitter;
import de.hub.modsoft.twittersearch.model.TwitterObjectType;
import de.hub.modsoft.twittersearch.model.TwitterSearchPackage;
import de.hub.modsoft.twittersearch.xtext.services.TwitterSearchGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public abstract class AbstractTwitterSearchSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TwitterSearchGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == TwitterSearchPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case TwitterSearchPackage.FIELD_DECLARATION:
				sequence_FieldDclr(context, (FieldDeclaration) semanticObject); 
				return; 
			case TwitterSearchPackage.SEARCH:
				sequence_Search(context, (Search) semanticObject); 
				return; 
			case TwitterSearchPackage.TWITTER:
				sequence_Model(context, (Twitter) semanticObject); 
				return; 
			case TwitterSearchPackage.TWITTER_OBJECT_TYPE:
				sequence_ObjectTypeDclr(context, (TwitterObjectType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID fieldType=FieldType)
	 */
	protected void sequence_FieldDclr(EObject context, FieldDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (objectTypes+=ObjectTypeDclr* searches+=Search*)
	 */
	protected void sequence_Model(EObject context, Twitter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID fields+=FieldDclr*)
	 */
	protected void sequence_ObjectTypeDclr(EObject context, TwitterObjectType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Search}
	 */
	protected void sequence_Search(EObject context, Search semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
